# generated by datamodel-codegen:
#   filename:  manifest_v11.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import Extra, Field, constr

from dbt_artifacts_parser.parsers.base import BaseParserModel


class Documentation(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    block_contents: str


class Type(Enum):
    dashboard = 'dashboard'
    notebook = 'notebook'
    analysis = 'analysis'
    ml = 'ml'
    application = 'application'


class MaturityEnum(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class SupportedLanguage(Enum):
    python = 'python'
    sql = 'sql'


class ManifestMetadata(BaseParserModel):
    class Config:
        extra = Extra.forbid

    dbt_schema_version: Optional[str] = None
    dbt_version: Optional[str] = '1.8.0a1'
    generated_at: Optional[str] = None
    invocation_id: Optional[Optional[str]] = None
    env: Optional[Dict[str, str]] = None
    project_name: Optional[Optional[str]] = Field(
        None, description='Name of the root project'
    )
    project_id: Optional[Optional[str]] = Field(
        None,
        description='A unique identifier for the project, hashed from the project name',
    )
    user_id: Optional[Optional[UUID]] = Field(
        None, description='A unique identifier for the user'
    )
    send_anonymous_usage_stats: Optional[Optional[bool]] = Field(
        None, description='Whether dbt is configured to send anonymous usage statistics'
    )
    adapter_type: Optional[Optional[str]] = Field(
        None, description='The type name of the adapter'
    )


class Type1(Enum):
    simple = 'simple'
    ratio = 'ratio'
    cumulative = 'cumulative'
    derived = 'derived'


class Access(Enum):
    private = 'private'
    protected = 'protected'
    public = 'public'


class ResourceType(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'


class ResourceType1(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'


class Contract(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class Defaults(BaseParserModel):
    class Config:
        extra = Extra.forbid

    agg_time_dimension: Optional[Optional[str]] = None


class DeferRelation(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str]


class DependsOn(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Type2(Enum):
    categorical = 'categorical'
    time = 'time'


class Docs(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Type3(Enum):
    foreign = 'foreign'
    natural = 'natural'
    primary = 'primary'
    unique = 'unique'


class Entity(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    type: Type3
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    role: Optional[Optional[str]] = None
    expr: Optional[Optional[str]] = None


class ExposureConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True


class FileHash(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class InjectedCTE(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class MacroArgument(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    type: Optional[Optional[str]] = None
    description: Optional[str] = ''


class MacroDependsOn(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None


class Agg(Enum):
    sum = 'sum'
    min = 'min'
    max = 'max'
    count_distinct = 'count_distinct'
    sum_boolean = 'sum_boolean'
    average = 'average'
    percentile = 'percentile'
    median = 'median'
    count = 'count'


class MetricConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None


class GrainToDateEnum(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class OnConfigurationChange(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Access1(Enum):
    private = 'private'
    protected = 'protected'
    public = 'public'


class Type4(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class ModelLevelConstraint(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type4
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True
    columns: Optional[List[str]] = None


class OnConfigurationChange1(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class NodeRelation(BaseParserModel):
    class Config:
        extra = Extra.forbid

    alias: str
    schema_name: str
    database: Optional[Optional[str]] = None
    relation_name: Optional[Optional[str]] = None


class Owner(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    email: Optional[Optional[str]] = None
    name: Optional[Optional[str]] = None


class Quoting(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[Optional[bool]] = None
    schema_: Optional[Optional[bool]] = Field(None, alias='schema')
    identifier: Optional[Optional[bool]] = None
    column: Optional[Optional[bool]] = None


class RefArgs(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class SavedQueryConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None
    meta: Optional[Dict[str, Any]] = None


class OnConfigurationChange2(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class SemanticModelConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None
    meta: Optional[Dict[str, Any]] = None


class OnConfigurationChange3(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class SourceConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True


class TestConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field('dbt_test__audit', alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'test'
    severity: Optional[
        constr(regex=r'^([Ww][Aa][Rr][Nn]|[Ee][Rr][Rr][Oo][Rr])$')
    ] = 'ERROR'
    store_failures: Optional[Optional[bool]] = None
    store_failures_as: Optional[Optional[str]] = None
    where: Optional[Optional[str]] = None
    limit: Optional[Optional[int]] = None
    fail_calc: Optional[str] = 'count(*)'
    warn_if: Optional[str] = '!= 0'
    error_if: Optional[str] = '!= 0'


class TestMetadata(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    kwargs: Optional[Dict[str, Any]] = None
    namespace: Optional[Optional[str]] = None


class Type5(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class ColumnLevelConstraint(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type5
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class ContractConfig(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class TimeGranularity(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class ExportAs(Enum):
    table = 'table'
    view = 'view'


class ExportConfig(BaseParserModel):
    class Config:
        extra = Extra.forbid

    export_as: ExportAs
    schema_name: Optional[Optional[str]] = None
    alias: Optional[Optional[str]] = None


class ExternalPartition(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    name: Optional[str] = ''
    description: Optional[str] = ''
    data_type: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None


class FileSlice(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Hook(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class MeasureAggregationParameters(BaseParserModel):
    class Config:
        extra = Extra.forbid

    percentile: Optional[Optional[float]] = None
    use_discrete_percentile: Optional[bool] = False
    use_approximate_percentile: Optional[bool] = False


class OffsetToGrainEnum(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class Granularity(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class MetricTimeWindow(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity


class WindowChoice(Enum):
    sum = 'sum'
    min = 'min'
    max = 'max'
    count_distinct = 'count_distinct'
    sum_boolean = 'sum_boolean'
    average = 'average'
    percentile = 'percentile'
    median = 'median'
    count = 'count'


class NonAdditiveDimension(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    window_choice: WindowChoice
    window_groupings: List[str]


class PeriodEnum(Enum):
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class Time(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: Optional[Optional[int]] = None
    period: Optional[Optional[PeriodEnum]] = None


class WhereFilter(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class DimensionValidityParams(BaseParserModel):
    class Config:
        extra = Extra.forbid

    is_start: Optional[bool] = False
    is_end: Optional[bool] = False


class Exposure(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    type: Type
    owner: Owner
    description: Optional[str] = ''
    label: Optional[Optional[str]] = None
    maturity: Optional[Optional[MaturityEnum]] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[ExposureConfig] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    url: Optional[Optional[str]] = None
    depends_on: Optional[DependsOn] = None
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None


class Group(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    owner: Owner


class Macro(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    macro_sql: str
    depends_on: Optional[MacroDependsOn] = None
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    arguments: Optional[List[MacroArgument]] = None
    created_at: Optional[float] = None
    supported_languages: Optional[Optional[List[SupportedLanguage]]] = None


class ColumnInfo(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[ColumnLevelConstraint]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Export(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    config: ExportConfig


class ExternalTable(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    location: Optional[Optional[str]] = None
    file_format: Optional[Optional[str]] = None
    row_format: Optional[Optional[str]] = None
    tbl_properties: Optional[Optional[str]] = None
    partitions: Optional[Optional[Union[List[str], List[ExternalPartition]]]] = None


class FreshnessThreshold(BaseParserModel):
    class Config:
        extra = Extra.forbid

    warn_after: Optional[Optional[Time]] = None
    error_after: Optional[Optional[Time]] = None
    filter: Optional[Optional[str]] = None


class Measure(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    agg: Agg
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    create_metric: Optional[bool] = False
    expr: Optional[Optional[str]] = None
    agg_params: Optional[Optional[MeasureAggregationParameters]] = None
    non_additive_dimension: Optional[Optional[NonAdditiveDimension]] = None
    agg_time_dimension: Optional[Optional[str]] = None


class ModelConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[Hook]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = None
    contract: Optional[ContractConfig] = None
    access: Optional[Access1] = 'protected'


class NodeConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[Hook]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange1] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = None
    contract: Optional[ContractConfig] = None


class SeedConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'seed'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[Hook]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange2] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = None
    contract: Optional[ContractConfig] = None
    delimiter: Optional[str] = ','
    quote_columns: Optional[Optional[bool]] = None


class SnapshotConfig(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'snapshot'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[Hook]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[str]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange3] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = None
    contract: Optional[ContractConfig] = None
    strategy: Optional[Optional[str]] = None
    target_schema: Optional[Optional[str]] = None
    target_database: Optional[Optional[str]] = None
    updated_at: Optional[Optional[str]] = None
    check_cols: Optional[Optional[Union[str, List[str]]]] = None


class SourceFileMetadata(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice


class WhereFilterIntersection(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter]


class DimensionTypeParams(BaseParserModel):
    class Config:
        extra = Extra.forbid

    time_granularity: TimeGranularity
    validity_params: Optional[Optional[DimensionValidityParams]] = None


class MetricInput(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[WhereFilterIntersection]] = None
    alias: Optional[Optional[str]] = None
    offset_window: Optional[Optional[MetricTimeWindow]] = None
    offset_to_grain: Optional[Optional[OffsetToGrainEnum]] = None


class MetricInputMeasure(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[WhereFilterIntersection]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class AnalysisNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: Optional[NodeConfig] = None
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract] = None


class GenericTestNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    test_metadata: TestMetadata
    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: Optional[TestConfig] = None
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract] = None
    column_name: Optional[Optional[str]] = None
    file_key_name: Optional[Optional[str]] = None
    attached_node: Optional[Optional[str]] = None


class HookNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: Optional[NodeConfig] = None
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract] = None
    index: Optional[Optional[int]] = None


class ModelNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: Optional[ModelConfig] = None
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract] = None
    access: Optional[Access] = 'protected'
    constraints: Optional[List[ModelLevelConstraint]] = None
    version: Optional[Optional[Union[str, float]]] = None
    latest_version: Optional[Optional[Union[str, float]]] = None
    deprecation_date: Optional[Optional[str]] = None
    defer_relation: Optional[Optional[DeferRelation]] = None


class RPCNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: Optional[NodeConfig] = None
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract] = None


class SeedNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: Optional[SeedConfig] = None
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    root_path: Optional[Optional[str]] = None
    depends_on: Optional[MacroDependsOn] = None
    defer_relation: Optional[Optional[DeferRelation]] = None


class SingularTestNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: Optional[TestConfig] = None
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract] = None


class SnapshotNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: SnapshotConfig
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract] = None
    defer_relation: Optional[Optional[DeferRelation]] = None


class SourceDefinition(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    source_name: str
    source_description: str
    loader: str
    identifier: str
    _event_status: Optional[Dict[str, Any]] = None
    quoting: Optional[Quoting] = None
    loaded_at_field: Optional[Optional[str]] = None
    freshness: Optional[Optional[FreshnessThreshold]] = None
    external: Optional[Optional[ExternalTable]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    source_meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[SourceConfig] = None
    patch_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    created_at: Optional[float] = None


class SqlNode(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash
    config: Optional[NodeConfig] = None
    _event_status: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs] = None
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    deferred: Optional[bool] = False
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract] = None


class Dimension(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    type: Type2
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    is_partition: Optional[bool] = False
    type_params: Optional[Optional[DimensionTypeParams]] = None
    expr: Optional[Optional[str]] = None
    metadata: Optional[Optional[SourceFileMetadata]] = None


class MetricTypeParams(BaseParserModel):
    class Config:
        extra = Extra.forbid

    measure: Optional[Optional[MetricInputMeasure]] = None
    input_measures: Optional[List[MetricInputMeasure]] = None
    numerator: Optional[Optional[MetricInput]] = None
    denominator: Optional[Optional[MetricInput]] = None
    expr: Optional[Optional[str]] = None
    window: Optional[Optional[MetricTimeWindow]] = None
    grain_to_date: Optional[Optional[GrainToDateEnum]] = None
    metrics: Optional[Optional[List[MetricInput]]] = None


class QueryParams(BaseParserModel):
    class Config:
        extra = Extra.forbid

    metrics: List[str]
    group_by: List[str]
    where: Optional[WhereFilterIntersection]


class Metric(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: str
    label: str
    type: Type1
    type_params: MetricTypeParams
    filter: Optional[Optional[WhereFilterIntersection]] = None
    metadata: Optional[Optional[SourceFileMetadata]] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[MetricConfig] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    sources: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = None
    refs: Optional[List[RefArgs]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None
    group: Optional[Optional[str]] = None


class SavedQuery(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: ResourceType
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    query_params: QueryParams
    exports: List[Export]
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    metadata: Optional[Optional[SourceFileMetadata]] = None
    config: Optional[SavedQueryConfig] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    depends_on: Optional[DependsOn] = None
    created_at: Optional[float] = None
    refs: Optional[List[RefArgs]] = None


class SemanticModel(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: ResourceType1
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    model: str
    node_relation: Optional[NodeRelation]
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    defaults: Optional[Optional[Defaults]] = None
    entities: Optional[List[Entity]] = None
    measures: Optional[List[Measure]] = None
    dimensions: Optional[List[Dimension]] = None
    metadata: Optional[Optional[SourceFileMetadata]] = None
    depends_on: Optional[DependsOn] = None
    refs: Optional[List[RefArgs]] = None
    created_at: Optional[float] = None
    config: Optional[SemanticModelConfig] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    primary_entity: Optional[Optional[str]] = None
    group: Optional[Optional[str]] = None


# NOTE Manually replaced the class, as datamodel-code-generator didn't work as expected.
class ManifestV11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    metadata: ManifestMetadata = Field(..., description='Metadata about the manifest')
    nodes: Dict[
        str,
        Union[
            AnalysisNode,
            SingularTestNode,
            HookNode,
            ModelNode,
            RPCNode,
            SqlNode,
            GenericTestNode,
            SnapshotNode,
            SeedNode,
        ],
    ] = Field(
        ..., description='The nodes defined in the dbt project and its dependencies'
    )
    sources: Dict[str, SourceDefinition] = Field(
        ..., description='The sources defined in the dbt project and its dependencies'
    )
    macros: Dict[str, Macro] = Field(
        ..., description='The macros defined in the dbt project and its dependencies'
    )
    docs: Dict[str, Documentation] = Field(
        ..., description='The docs defined in the dbt project and its dependencies'
    )
    exposures: Dict[str, Exposure] = Field(
        ..., description='The exposures defined in the dbt project and its dependencies'
    )
    metrics: Dict[str, Metric] = Field(
        ..., description='The metrics defined in the dbt project and its dependencies'
    )
    groups: Dict[str, Group] = Field(
        ..., description='The groups defined in the dbt project'
    )
    selectors: Dict[str, Any] = Field(
        ..., description='The selectors defined in selectors.yml'
    )
    disabled: Optional[
        Dict[
            str,
            List[
                Union[
                    AnalysisNode,
                    SingularTestNode,
                    HookNode,
                    ModelNode,
                    RPCNode,
                    SqlNode,
                    GenericTestNode,
                    SnapshotNode,
                    SeedNode,
                    SourceDefinition,
                    Exposure,
                    Metric,
                    SavedQuery,
                    SemanticModel,
                ]
            ],
        ]
    ] = Field(..., description='A mapping of the disabled nodes in the target')
    parent_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from\xa0child nodes to their dependencies'
    )
    child_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from parent nodes to their dependents'
    )
    group_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from group names to their nodes'
    )
    saved_queries: Dict[str, SavedQuery] = Field(
        ..., description='The saved queries defined in the dbt project'
    )
    semantic_models: Dict[str, SemanticModel] = Field(
        ..., description='The semantic models defined in the dbt project'
    )
