# generated by datamodel-codegen:
#   filename:  manifest_v12.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import Extra, Field, constr

from dbt_artifacts_parser.parsers.base import BaseParserModel


class Metadata(BaseParserModel):
    class Config:
        extra = Extra.forbid

    dbt_schema_version: Optional[str] = None
    dbt_version: Optional[str] = '1.8.0b3'
    generated_at: Optional[str] = None
    invocation_id: Optional[Optional[str]] = None
    env: Optional[Dict[str, str]] = None
    project_name: Optional[Optional[str]] = Field(
        None, description='Name of the root project'
    )
    project_id: Optional[Optional[str]] = Field(
        None,
        description='A unique identifier for the project, hashed from the project name',
    )
    user_id: Optional[Optional[UUID]] = Field(
        None, description='A unique identifier for the user'
    )
    send_anonymous_usage_stats: Optional[Optional[bool]] = Field(
        None, description='Whether dbt is configured to send anonymous usage statistics'
    )
    adapter_type: Optional[Optional[str]] = Field(
        None, description='The type name of the adapter'
    )


class Checksum(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'seed'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    contract: Optional[Contract] = Field(None, title='ContractConfig')
    delimiter: Optional[str] = ','
    quote_columns: Optional[Optional[bool]] = None


class Type(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class DependsOn(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None


class ResourceType(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class PostHookItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange1(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class ConfigItem(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem1]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem1]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange1] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs2] = Field(None, title='Docs')
    contract: Optional[Contract1] = Field(None, title='ContractConfig')


class DeferRelationItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str]
    resource_type: ResourceType
    name: str
    description: str
    compiled_code: Optional[str]
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[ConfigItem]


class Node(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum = Field(..., title='FileHash')
    config: Optional[Config] = Field(None, title='SeedConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs1] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    root_path: Optional[Optional[str]] = None
    depends_on: Optional[DependsOn] = Field(None, title='MacroDependsOn')
    defer_relation: Optional[Optional[DeferRelationItem]] = None


class Checksum1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange2(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config1(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem2]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem2]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange2] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs3] = Field(None, title='Docs')
    contract: Optional[Contract2] = Field(None, title='ContractConfig')


class Type1(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type1
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns1(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint1]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class Node1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum1 = Field(..., title='FileHash')
    config: Optional[Config1] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns1]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs4] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn1] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract3] = Field(None, title='Contract')


class Checksum2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class Config2(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field('dbt_test__audit', alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'test'
    severity: Optional[
        constr(regex=r'^([Ww][Aa][Rr][Nn]|[Ee][Rr][Rr][Oo][Rr])$')
    ] = 'ERROR'
    store_failures: Optional[Optional[bool]] = None
    store_failures_as: Optional[Optional[str]] = None
    where: Optional[Optional[str]] = None
    limit: Optional[Optional[int]] = None
    fail_calc: Optional[str] = 'count(*)'
    warn_if: Optional[str] = '!= 0'
    error_if: Optional[str] = '!= 0'


class Type2(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type2
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns2(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint2]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class Node2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum2 = Field(..., title='FileHash')
    config: Optional[Config2] = Field(None, title='TestConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns2]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs5] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref1]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn2] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte1]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract4] = Field(None, title='Contract')


class Checksum3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange3(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config3(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem3]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem3]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange3] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs6] = Field(None, title='Docs')
    contract: Optional[Contract5] = Field(None, title='ContractConfig')


class Type3(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type3
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns3(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint3]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class Node3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum3 = Field(..., title='FileHash')
    config: Optional[Config3] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns3]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs7] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref2]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn3] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte2]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract6] = Field(None, title='Contract')
    index: Optional[Optional[int]] = None


class Checksum4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange4(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Access(Enum):
    private = 'private'
    protected = 'protected'
    public = 'public'


class Config4(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem4]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem4]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange4] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs8] = Field(None, title='Docs')
    contract: Optional[Contract7] = Field(None, title='ContractConfig')
    access: Optional[Access] = 'protected'


class Type4(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type4
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns4(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint4]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class Access1(Enum):
    private = 'private'
    protected = 'protected'
    public = 'public'


class Type5(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type5
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True
    columns: Optional[List[str]] = None


class ResourceType1(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class PostHookItem5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange5(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class ConfigItem1(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem5]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem5]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange5] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs10] = Field(None, title='Docs')
    contract: Optional[Contract9] = Field(None, title='ContractConfig')


class DeferRelationItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str]
    resource_type: ResourceType1
    name: str
    description: str
    compiled_code: Optional[str]
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[ConfigItem1]


class Node4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum4 = Field(..., title='FileHash')
    config: Optional[Config4] = Field(None, title='ModelConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns4]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs9] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref3]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn4] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte3]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract8] = Field(None, title='Contract')
    access: Optional[Access1] = 'protected'
    constraints: Optional[List[Constraint5]] = None
    version: Optional[Optional[Union[str, float]]] = None
    latest_version: Optional[Optional[Union[str, float]]] = None
    deprecation_date: Optional[Optional[str]] = None
    defer_relation: Optional[Optional[DeferRelationItem1]] = None
    primary_key: Optional[Optional[List[str]]] = None


class Checksum5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange6(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config5(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem6]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem6]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange6] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs11] = Field(None, title='Docs')
    contract: Optional[Contract10] = Field(None, title='ContractConfig')


class Type6(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type6
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns5(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint6]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class Node5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum5 = Field(..., title='FileHash')
    config: Optional[Config5] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns5]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs12] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref4]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte4]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract11] = Field(None, title='Contract')


class Checksum6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class Config6(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field('dbt_test__audit', alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'test'
    severity: Optional[
        constr(regex=r'^([Ww][Aa][Rr][Nn]|[Ee][Rr][Rr][Oo][Rr])$')
    ] = 'ERROR'
    store_failures: Optional[Optional[bool]] = None
    store_failures_as: Optional[Optional[str]] = None
    where: Optional[Optional[str]] = None
    limit: Optional[Optional[int]] = None
    fail_calc: Optional[str] = 'count(*)'
    warn_if: Optional[str] = '!= 0'
    error_if: Optional[str] = '!= 0'


class Type7(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type7
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns6(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint7]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class TestMetadata(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = 'test'
    kwargs: Optional[Dict[str, Any]] = None
    namespace: Optional[Optional[str]] = None


class Node6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum6 = Field(..., title='FileHash')
    config: Optional[Config6] = Field(None, title='TestConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns6]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs13] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref5]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn6] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte5]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract12] = Field(None, title='Contract')
    column_name: Optional[Optional[str]] = None
    file_key_name: Optional[Optional[str]] = None
    attached_node: Optional[Optional[str]] = None
    test_metadata: Optional[TestMetadata] = Field(None, title='TestMetadata')


class Checksum7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange7(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config7(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'snapshot'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem7]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem7]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[str]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange7] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs14] = Field(None, title='Docs')
    contract: Optional[Contract13] = Field(None, title='ContractConfig')
    strategy: Optional[Optional[str]] = None
    target_schema: Optional[Optional[str]] = None
    target_database: Optional[Optional[str]] = None
    updated_at: Optional[Optional[str]] = None
    check_cols: Optional[Optional[Union[str, List[str]]]] = None


class Type8(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type8
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns7(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint8]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class ResourceType2(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class PostHookItem8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange8(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs16(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class ConfigItem2(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem8]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem8]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange8] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs16] = Field(None, title='Docs')
    contract: Optional[Contract15] = Field(None, title='ContractConfig')


class DeferRelationItem2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str]
    resource_type: ResourceType2
    name: str
    description: str
    compiled_code: Optional[str]
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[ConfigItem2]


class Node7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum7 = Field(..., title='FileHash')
    config: Config7 = Field(..., title='SnapshotConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns7]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs15] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref6]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn7] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte6]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract14] = Field(None, title='Contract')
    defer_relation: Optional[Optional[DeferRelationItem2]] = None


class Quoting(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[Optional[bool]] = None
    schema_: Optional[Optional[bool]] = Field(None, alias='schema')
    identifier: Optional[Optional[bool]] = None
    column: Optional[Optional[bool]] = None


class PeriodEnum(Enum):
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class WarnAfterItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: Optional[Optional[int]] = None
    period: Optional[Optional[PeriodEnum]] = None


class PeriodEnum1(Enum):
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class ErrorAfterItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: Optional[Optional[int]] = None
    period: Optional[Optional[PeriodEnum1]] = None


class Freshnes(BaseParserModel):
    class Config:
        extra = Extra.forbid

    warn_after: Optional[Optional[WarnAfterItem]] = None
    error_after: Optional[Optional[ErrorAfterItem]] = None
    filter: Optional[Optional[str]] = None


class Partition(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    name: Optional[str] = ''
    description: Optional[str] = ''
    data_type: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None


class ExternalItem(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    location: Optional[Optional[str]] = None
    file_format: Optional[Optional[str]] = None
    row_format: Optional[Optional[str]] = None
    tbl_properties: Optional[Optional[str]] = None
    partitions: Optional[Optional[Union[List[str], List[Partition]]]] = None


class Type9(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type9
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns8(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint9]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Config8(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True


class Sources(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    source_name: str
    source_description: str
    loader: str
    identifier: str
    quoting: Optional[Quoting] = Field(None, title='Quoting')
    loaded_at_field: Optional[Optional[str]] = None
    freshness: Optional[Optional[Freshnes]] = None
    external: Optional[Optional[ExternalItem]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns8]] = None
    meta: Optional[Dict[str, Any]] = None
    source_meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[Config8] = Field(None, title='SourceConfig')
    patch_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    created_at: Optional[float] = None


class DependsOn8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None


class Docs17(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Argument(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    type: Optional[Optional[str]] = None
    description: Optional[str] = ''


class SupportedLanguage(Enum):
    python = 'python'
    sql = 'sql'


class Macros(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    macro_sql: str
    depends_on: Optional[DependsOn8] = Field(None, title='MacroDependsOn')
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    docs: Optional[Docs17] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    arguments: Optional[List[Argument]] = None
    created_at: Optional[float] = None
    supported_languages: Optional[Optional[List[SupportedLanguage]]] = None


class Docs18(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    block_contents: str


class Type10(Enum):
    dashboard = 'dashboard'
    notebook = 'notebook'
    analysis = 'analysis'
    ml = 'ml'
    application = 'application'


class Owner(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    email: Optional[Optional[str]] = None
    name: Optional[Optional[str]] = None


class MaturityEnum(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class Config9(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True


class DependsOn9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Ref7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class Exposures(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    type: Type10
    owner: Owner = Field(..., title='Owner')
    description: Optional[str] = ''
    label: Optional[Optional[str]] = None
    maturity: Optional[Optional[MaturityEnum]] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[Config9] = Field(None, title='ExposureConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    url: Optional[Optional[str]] = None
    depends_on: Optional[DependsOn9] = Field(None, title='DependsOn')
    refs: Optional[List[Ref7]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None


class Type11(Enum):
    simple = 'simple'
    ratio = 'ratio'
    cumulative = 'cumulative'
    derived = 'derived'
    conversion = 'conversion'


class WhereFilter(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter]


class MeasureItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class WhereFilter1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter1]


class InputMeasure(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem1]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class WhereFilter2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter2]


class Granularity(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class OffsetWindowItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity


class OffsetToGrainEnum(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class NumeratorItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem2]] = None
    alias: Optional[Optional[str]] = None
    offset_window: Optional[Optional[OffsetWindowItem]] = None
    offset_to_grain: Optional[Optional[OffsetToGrainEnum]] = None


class WhereFilter3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter3]


class Granularity1(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class OffsetWindowItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity1


class OffsetToGrainEnum1(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class DenominatorItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem3]] = None
    alias: Optional[Optional[str]] = None
    offset_window: Optional[Optional[OffsetWindowItem1]] = None
    offset_to_grain: Optional[Optional[OffsetToGrainEnum1]] = None


class Granularity2(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class WindowItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity2


class GrainToDateEnum(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class WhereFilter4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter4]


class Granularity3(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class OffsetWindowItem2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity3


class OffsetToGrainEnum2(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class Metric(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem4]] = None
    alias: Optional[Optional[str]] = None
    offset_window: Optional[Optional[OffsetWindowItem2]] = None
    offset_to_grain: Optional[Optional[OffsetToGrainEnum2]] = None


class WhereFilter5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter5]


class BaseMeasure(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem5]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class WhereFilter6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter6]


class ConversionMeasure(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem6]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class Calculation(Enum):
    conversions = 'conversions'
    conversion_rate = 'conversion_rate'


class Granularity4(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class WindowItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity4


class ConstantProperty(BaseParserModel):
    class Config:
        extra = Extra.forbid

    base_property: str
    conversion_property: str


class ConversionTypeParam(BaseParserModel):
    class Config:
        extra = Extra.forbid

    base_measure: BaseMeasure = Field(..., title='MetricInputMeasure')
    conversion_measure: ConversionMeasure = Field(..., title='MetricInputMeasure')
    entity: str
    calculation: Optional[Calculation] = 'conversion_rate'
    window: Optional[Optional[WindowItem1]] = None
    constant_properties: Optional[Optional[List[ConstantProperty]]] = None


class TypeParams(BaseParserModel):
    class Config:
        extra = Extra.forbid

    measure: Optional[Optional[MeasureItem]] = None
    input_measures: Optional[List[InputMeasure]] = None
    numerator: Optional[Optional[NumeratorItem]] = None
    denominator: Optional[Optional[DenominatorItem]] = None
    expr: Optional[Optional[str]] = None
    window: Optional[Optional[WindowItem]] = None
    grain_to_date: Optional[Optional[GrainToDateEnum]] = None
    metrics: Optional[Optional[List[Metric]]] = None
    conversion_type_params: Optional[Optional[ConversionTypeParam]] = None


class WhereFilter7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter7]


class FileSlice(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Metadatum(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice = Field(..., title='FileSlice')


class Config10(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None
    meta: Optional[Dict[str, Any]] = None


class DependsOn10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Ref8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class Metrics(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: str
    label: str
    type: Type11
    type_params: TypeParams = Field(..., title='MetricTypeParams')
    filter: Optional[Optional[FilterItem7]] = None
    metadata: Optional[Optional[Metadatum]] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[Config10] = Field(None, title='MetricConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    sources: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn10] = Field(None, title='DependsOn')
    refs: Optional[List[Ref8]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None
    group: Optional[Optional[str]] = None


class Owner1(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    email: Optional[Optional[str]] = None
    name: Optional[Optional[str]] = None


class Groups(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    owner: Owner1 = Field(..., title='Owner')


class Checksum8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange9(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs19(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract16(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config11(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'seed'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem9]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem9]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange9] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs19] = Field(None, title='Docs')
    contract: Optional[Contract16] = Field(None, title='ContractConfig')
    delimiter: Optional[str] = ','
    quote_columns: Optional[Optional[bool]] = None


class Type12(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type12
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns9(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint10]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs20(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class DependsOn11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None


class ResourceType3(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class PostHookItem10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange10(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs21(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract17(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class ConfigItem3(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem10]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem10]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange10] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs21] = Field(None, title='Docs')
    contract: Optional[Contract17] = Field(None, title='ContractConfig')


class DeferRelationItem3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str]
    resource_type: ResourceType3
    name: str
    description: str
    compiled_code: Optional[str]
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[ConfigItem3]


class DisabledItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum8 = Field(..., title='FileHash')
    config: Optional[Config11] = Field(None, title='SeedConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns9]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs20] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    root_path: Optional[Optional[str]] = None
    depends_on: Optional[DependsOn11] = Field(None, title='MacroDependsOn')
    defer_relation: Optional[Optional[DeferRelationItem3]] = None


class Checksum9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange11(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs22(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract18(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config12(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem11]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem11]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange11] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs22] = Field(None, title='Docs')
    contract: Optional[Contract18] = Field(None, title='ContractConfig')


class Type13(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type13
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns10(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint11]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs23(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract19(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class DisabledItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum9 = Field(..., title='FileHash')
    config: Optional[Config12] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns10]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs23] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref9]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn12] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte7]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract19] = Field(None, title='Contract')


class Checksum10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class Config13(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field('dbt_test__audit', alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'test'
    severity: Optional[
        constr(regex=r'^([Ww][Aa][Rr][Nn]|[Ee][Rr][Rr][Oo][Rr])$')
    ] = 'ERROR'
    store_failures: Optional[Optional[bool]] = None
    store_failures_as: Optional[Optional[str]] = None
    where: Optional[Optional[str]] = None
    limit: Optional[Optional[int]] = None
    fail_calc: Optional[str] = 'count(*)'
    warn_if: Optional[str] = '!= 0'
    error_if: Optional[str] = '!= 0'


class Type14(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type14
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns11(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint12]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs24(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract20(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class DisabledItem2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum10 = Field(..., title='FileHash')
    config: Optional[Config13] = Field(None, title='TestConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns11]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs24] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref10]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn13] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte8]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract20] = Field(None, title='Contract')


class Checksum11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange12(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs25(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract21(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config14(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem12]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem12]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange12] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs25] = Field(None, title='Docs')
    contract: Optional[Contract21] = Field(None, title='ContractConfig')


class Type15(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type15
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns12(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint13]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs26(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract22(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class DisabledItem3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum11 = Field(..., title='FileHash')
    config: Optional[Config14] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns12]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs26] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref11]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn14] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte9]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract22] = Field(None, title='Contract')
    index: Optional[Optional[int]] = None


class Checksum12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange13(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs27(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract23(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Access2(Enum):
    private = 'private'
    protected = 'protected'
    public = 'public'


class Config15(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem13]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem13]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange13] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs27] = Field(None, title='Docs')
    contract: Optional[Contract23] = Field(None, title='ContractConfig')
    access: Optional[Access2] = 'protected'


class Type16(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type16
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns13(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint14]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs28(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract24(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class Access3(Enum):
    private = 'private'
    protected = 'protected'
    public = 'public'


class Type17(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type17
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True
    columns: Optional[List[str]] = None


class ResourceType4(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class PostHookItem14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange14(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs29(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract25(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class ConfigItem4(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem14]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem14]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange14] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs29] = Field(None, title='Docs')
    contract: Optional[Contract25] = Field(None, title='ContractConfig')


class DeferRelationItem4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str]
    resource_type: ResourceType4
    name: str
    description: str
    compiled_code: Optional[str]
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[ConfigItem4]


class DisabledItem4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum12 = Field(..., title='FileHash')
    config: Optional[Config15] = Field(None, title='ModelConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns13]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs28] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref12]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte10]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract24] = Field(None, title='Contract')
    access: Optional[Access3] = 'protected'
    constraints: Optional[List[Constraint15]] = None
    version: Optional[Optional[Union[str, float]]] = None
    latest_version: Optional[Optional[Union[str, float]]] = None
    deprecation_date: Optional[Optional[str]] = None
    defer_relation: Optional[Optional[DeferRelationItem4]] = None
    primary_key: Optional[Optional[List[str]]] = None


class Checksum13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange15(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs30(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract26(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config16(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem15]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem15]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange15] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs30] = Field(None, title='Docs')
    contract: Optional[Contract26] = Field(None, title='ContractConfig')


class Type18(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint16(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type18
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns14(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint16]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs31(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn16(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract27(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class DisabledItem5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum13 = Field(..., title='FileHash')
    config: Optional[Config16] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns14]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs31] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref13]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn16] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte11]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract27] = Field(None, title='Contract')


class Checksum14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class Config17(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field('dbt_test__audit', alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'test'
    severity: Optional[
        constr(regex=r'^([Ww][Aa][Rr][Nn]|[Ee][Rr][Rr][Oo][Rr])$')
    ] = 'ERROR'
    store_failures: Optional[Optional[bool]] = None
    store_failures_as: Optional[Optional[str]] = None
    where: Optional[Optional[str]] = None
    limit: Optional[Optional[int]] = None
    fail_calc: Optional[str] = 'count(*)'
    warn_if: Optional[str] = '!= 0'
    error_if: Optional[str] = '!= 0'


class Type19(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint17(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type19
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns15(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint17]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs32(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn17(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract28(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class TestMetadata1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = 'test'
    kwargs: Optional[Dict[str, Any]] = None
    namespace: Optional[Optional[str]] = None


class DisabledItem6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum14 = Field(..., title='FileHash')
    config: Optional[Config17] = Field(None, title='TestConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns15]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs32] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref14]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn17] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte12]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract28] = Field(None, title='Contract')
    column_name: Optional[Optional[str]] = None
    file_key_name: Optional[Optional[str]] = None
    attached_node: Optional[Optional[str]] = None
    test_metadata: Optional[TestMetadata1] = Field(None, title='TestMetadata')


class Checksum15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    checksum: str


class PostHookItem16(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem16(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange16(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs33(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract29(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class Config18(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'snapshot'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem16]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem16]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[str]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange16] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs33] = Field(None, title='Docs')
    contract: Optional[Contract29] = Field(None, title='ContractConfig')
    strategy: Optional[Optional[str]] = None
    target_schema: Optional[Optional[str]] = None
    target_database: Optional[Optional[str]] = None
    updated_at: Optional[Optional[str]] = None
    check_cols: Optional[Optional[Union[str, List[str]]]] = None


class Type20(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint18(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type20
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns16(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint18]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Docs34(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Ref15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DependsOn18(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class ExtraCte13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    id: str
    sql: str


class Contract30(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[Optional[str]] = None


class ResourceType5(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class PostHookItem17(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class PreHookItem17(BaseParserModel):
    class Config:
        extra = Extra.forbid

    sql: str
    transaction: Optional[bool] = True
    index: Optional[Optional[int]] = None


class OnConfigurationChange17(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs35(BaseParserModel):
    class Config:
        extra = Extra.forbid

    show: Optional[bool] = True
    node_color: Optional[Optional[str]] = None


class Contract31(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class ConfigItem5(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    alias: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    database: Optional[Optional[str]] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[Optional[str]] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[PostHookItem17]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[PreHookItem17]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[Optional[bool]] = None
    unique_key: Optional[Optional[Union[str, List[str]]]] = None
    on_schema_change: Optional[Optional[str]] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange17] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs35] = Field(None, title='Docs')
    contract: Optional[Contract31] = Field(None, title='ContractConfig')


class DeferRelationItem5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str]
    resource_type: ResourceType5
    name: str
    description: str
    compiled_code: Optional[str]
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[ConfigItem5]


class DisabledItem7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: Checksum15 = Field(..., title='FileHash')
    config: Config18 = Field(..., title='SnapshotConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns16]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    docs: Optional[Docs34] = Field(None, title='Docs')
    patch_path: Optional[Optional[str]] = None
    build_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    raw_code: Optional[str] = ''
    language: Optional[str] = 'sql'
    refs: Optional[List[Ref15]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn18] = Field(None, title='DependsOn')
    compiled_path: Optional[Optional[str]] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[Optional[str]] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[ExtraCte13]] = None
    _pre_injected_sql: Optional[Optional[str]] = None
    contract: Optional[Contract30] = Field(None, title='Contract')
    defer_relation: Optional[Optional[DeferRelationItem5]] = None


class Quoting1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[Optional[bool]] = None
    schema_: Optional[Optional[bool]] = Field(None, alias='schema')
    identifier: Optional[Optional[bool]] = None
    column: Optional[Optional[bool]] = None


class PeriodEnum2(Enum):
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class WarnAfterItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: Optional[Optional[int]] = None
    period: Optional[Optional[PeriodEnum2]] = None


class PeriodEnum3(Enum):
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class ErrorAfterItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: Optional[Optional[int]] = None
    period: Optional[Optional[PeriodEnum3]] = None


class Freshnes1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    warn_after: Optional[Optional[WarnAfterItem1]] = None
    error_after: Optional[Optional[ErrorAfterItem1]] = None
    filter: Optional[Optional[str]] = None


class Partition1(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    name: Optional[str] = ''
    description: Optional[str] = ''
    data_type: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None


class ExternalItem1(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    location: Optional[Optional[str]] = None
    file_format: Optional[Optional[str]] = None
    row_format: Optional[Optional[str]] = None
    tbl_properties: Optional[Optional[str]] = None
    partitions: Optional[Optional[Union[List[str], List[Partition1]]]] = None


class Type21(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class Constraint19(BaseParserModel):
    class Config:
        extra = Extra.forbid

    type: Type21
    name: Optional[Optional[str]] = None
    expression: Optional[Optional[str]] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True


class Columns17(BaseParserModel):
    class Config:
        extra = Extra.allow

    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[Optional[str]] = None
    constraints: Optional[List[Constraint19]] = None
    quote: Optional[Optional[bool]] = None
    tags: Optional[List[str]] = None
    _extra: Optional[Dict[str, Any]] = None


class Config19(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True


class DisabledItem8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    database: Optional[str]
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    source_name: str
    source_description: str
    loader: str
    identifier: str
    quoting: Optional[Quoting1] = Field(None, title='Quoting')
    loaded_at_field: Optional[Optional[str]] = None
    freshness: Optional[Optional[Freshnes1]] = None
    external: Optional[Optional[ExternalItem1]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, Columns17]] = None
    meta: Optional[Dict[str, Any]] = None
    source_meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[Config19] = Field(None, title='SourceConfig')
    patch_path: Optional[Optional[str]] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    relation_name: Optional[Optional[str]] = None
    created_at: Optional[float] = None


class Type22(Enum):
    dashboard = 'dashboard'
    notebook = 'notebook'
    analysis = 'analysis'
    ml = 'ml'
    application = 'application'


class Owner2(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    email: Optional[Optional[str]] = None
    name: Optional[Optional[str]] = None


class MaturityEnum1(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class Config20(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True


class DependsOn19(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Ref16(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DisabledItem9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    type: Type22
    owner: Owner2 = Field(..., title='Owner')
    description: Optional[str] = ''
    label: Optional[Optional[str]] = None
    maturity: Optional[Optional[MaturityEnum1]] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[Config20] = Field(None, title='ExposureConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    url: Optional[Optional[str]] = None
    depends_on: Optional[DependsOn19] = Field(None, title='DependsOn')
    refs: Optional[List[Ref16]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None


class Type23(Enum):
    simple = 'simple'
    ratio = 'ratio'
    cumulative = 'cumulative'
    derived = 'derived'
    conversion = 'conversion'


class WhereFilter8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem8(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter8]


class MeasureItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem8]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class WhereFilter9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem9(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter9]


class InputMeasure1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem9]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class WhereFilter10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter10]


class Granularity5(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class OffsetWindowItem3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity5


class OffsetToGrainEnum3(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class NumeratorItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem10]] = None
    alias: Optional[Optional[str]] = None
    offset_window: Optional[Optional[OffsetWindowItem3]] = None
    offset_to_grain: Optional[Optional[OffsetToGrainEnum3]] = None


class WhereFilter11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter11]


class Granularity6(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class OffsetWindowItem4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity6


class OffsetToGrainEnum4(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class DenominatorItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem11]] = None
    alias: Optional[Optional[str]] = None
    offset_window: Optional[Optional[OffsetWindowItem4]] = None
    offset_to_grain: Optional[Optional[OffsetToGrainEnum4]] = None


class Granularity7(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class WindowItem2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity7


class GrainToDateEnum1(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class WhereFilter12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter12]


class Granularity8(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class OffsetWindowItem5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity8


class OffsetToGrainEnum5(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class Metric1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem12]] = None
    alias: Optional[Optional[str]] = None
    offset_window: Optional[Optional[OffsetWindowItem5]] = None
    offset_to_grain: Optional[Optional[OffsetToGrainEnum5]] = None


class WhereFilter13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter13]


class BaseMeasure1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem13]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class WhereFilter14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem14(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter14]


class ConversionMeasure1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    filter: Optional[Optional[FilterItem14]] = None
    alias: Optional[Optional[str]] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[Optional[int]] = None


class Calculation1(Enum):
    conversions = 'conversions'
    conversion_rate = 'conversion_rate'


class Granularity9(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class WindowItem3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    count: int
    granularity: Granularity9


class ConstantProperty1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    base_property: str
    conversion_property: str


class ConversionTypeParam1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    base_measure: BaseMeasure1 = Field(..., title='MetricInputMeasure')
    conversion_measure: ConversionMeasure1 = Field(..., title='MetricInputMeasure')
    entity: str
    calculation: Optional[Calculation1] = 'conversion_rate'
    window: Optional[Optional[WindowItem3]] = None
    constant_properties: Optional[Optional[List[ConstantProperty1]]] = None


class TypeParams1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    measure: Optional[Optional[MeasureItem1]] = None
    input_measures: Optional[List[InputMeasure1]] = None
    numerator: Optional[Optional[NumeratorItem1]] = None
    denominator: Optional[Optional[DenominatorItem1]] = None
    expr: Optional[Optional[str]] = None
    window: Optional[Optional[WindowItem2]] = None
    grain_to_date: Optional[Optional[GrainToDateEnum1]] = None
    metrics: Optional[Optional[List[Metric1]]] = None
    conversion_type_params: Optional[Optional[ConversionTypeParam1]] = None


class WhereFilter15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class FilterItem15(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter15]


class FileSlice1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Metadatum1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice1 = Field(..., title='FileSlice')


class Config21(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None
    meta: Optional[Dict[str, Any]] = None


class DependsOn20(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Ref17(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DisabledItem10(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: Any
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: str
    label: str
    type: Type23
    type_params: TypeParams1 = Field(..., title='MetricTypeParams')
    filter: Optional[Optional[FilterItem15]] = None
    metadata: Optional[Optional[Metadatum1]] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[Config21] = Field(None, title='MetricConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    sources: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn20] = Field(None, title='DependsOn')
    refs: Optional[List[Ref17]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None
    group: Optional[Optional[str]] = None


class ResourceType6(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class WhereFilter16(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class WhereItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter16]


class QueryParams(BaseParserModel):
    class Config:
        extra = Extra.forbid

    metrics: List[str]
    group_by: List[str]
    where: Optional[WhereItem]


class ExportAs(Enum):
    table = 'table'
    view = 'view'


class Config22(BaseParserModel):
    class Config:
        extra = Extra.forbid

    export_as: ExportAs
    schema_name: Optional[Optional[str]] = None
    alias: Optional[Optional[str]] = None
    database: Optional[Optional[str]] = None


class Export(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    config: Config22 = Field(..., title='ExportConfig')


class FileSlice2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Metadatum2(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice2 = Field(..., title='FileSlice')


class ExportA(Enum):
    table = 'table'
    view = 'view'


class Cache(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enabled: Optional[bool] = False


class Config23(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None
    meta: Optional[Dict[str, Any]] = None
    export_as: Optional[Optional[ExportA]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    cache: Optional[Cache] = Field(None, title='SavedQueryCache')


class DependsOn21(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Ref18(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class DisabledItem11(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: ResourceType6
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    query_params: QueryParams = Field(..., title='QueryParams')
    exports: List[Export]
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    metadata: Optional[Optional[Metadatum2]] = None
    config: Optional[Config23] = Field(None, title='SavedQueryConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    depends_on: Optional[DependsOn21] = Field(None, title='DependsOn')
    created_at: Optional[float] = None
    refs: Optional[List[Ref18]] = None


class ResourceType7(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class NodeRelationItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    alias: str
    schema_name: str
    database: Optional[Optional[str]] = None
    relation_name: Optional[Optional[str]] = ''


class Default(BaseParserModel):
    class Config:
        extra = Extra.forbid

    agg_time_dimension: Optional[Optional[str]] = None


class Type24(Enum):
    foreign = 'foreign'
    natural = 'natural'
    primary = 'primary'
    unique = 'unique'


class Entity(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    type: Type24
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    role: Optional[Optional[str]] = None
    expr: Optional[Optional[str]] = None


class Agg(Enum):
    sum = 'sum'
    min = 'min'
    max = 'max'
    count_distinct = 'count_distinct'
    sum_boolean = 'sum_boolean'
    average = 'average'
    percentile = 'percentile'
    median = 'median'
    count = 'count'


class AggParam(BaseParserModel):
    class Config:
        extra = Extra.forbid

    percentile: Optional[Optional[float]] = None
    use_discrete_percentile: Optional[bool] = False
    use_approximate_percentile: Optional[bool] = False


class WindowChoice(Enum):
    sum = 'sum'
    min = 'min'
    max = 'max'
    count_distinct = 'count_distinct'
    sum_boolean = 'sum_boolean'
    average = 'average'
    percentile = 'percentile'
    median = 'median'
    count = 'count'


class NonAdditiveDimensionItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    window_choice: WindowChoice
    window_groupings: List[str]


class Measure(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    agg: Agg
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    create_metric: Optional[bool] = False
    expr: Optional[Optional[str]] = None
    agg_params: Optional[Optional[AggParam]] = None
    non_additive_dimension: Optional[Optional[NonAdditiveDimensionItem]] = None
    agg_time_dimension: Optional[Optional[str]] = None


class Type25(Enum):
    categorical = 'categorical'
    time = 'time'


class TimeGranularity(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class ValidityParam(BaseParserModel):
    class Config:
        extra = Extra.forbid

    is_start: Optional[bool] = False
    is_end: Optional[bool] = False


class TypeParam(BaseParserModel):
    class Config:
        extra = Extra.forbid

    time_granularity: TimeGranularity
    validity_params: Optional[Optional[ValidityParam]] = None


class FileSlice3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Metadatum3(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice3 = Field(..., title='FileSlice')


class Dimension(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    type: Type25
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    is_partition: Optional[bool] = False
    type_params: Optional[Optional[TypeParam]] = None
    expr: Optional[Optional[str]] = None
    metadata: Optional[Optional[Metadatum3]] = None


class FileSlice4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Metadatum4(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice4 = Field(..., title='FileSlice')


class DependsOn22(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Ref19(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class Config24(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None
    meta: Optional[Dict[str, Any]] = None


class DisabledItem12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: ResourceType7
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    model: str
    node_relation: Optional[NodeRelationItem]
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    defaults: Optional[Optional[Default]] = None
    entities: Optional[List[Entity]] = None
    measures: Optional[List[Measure]] = None
    dimensions: Optional[List[Dimension]] = None
    metadata: Optional[Optional[Metadatum4]] = None
    depends_on: Optional[DependsOn22] = Field(None, title='DependsOn')
    refs: Optional[List[Ref19]] = None
    created_at: Optional[float] = None
    config: Optional[Config24] = Field(None, title='SemanticModelConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    primary_entity: Optional[Optional[str]] = None
    group: Optional[Optional[str]] = None


class Format(Enum):
    csv = 'csv'
    dict = 'dict'
    sql = 'sql'


class GivenItem(BaseParserModel):
    class Config:
        extra = Extra.forbid

    input: str
    rows: Optional[Optional[Union[str, List[Dict[str, Any]]]]] = None
    format: Optional[Format] = 'dict'
    fixture: Optional[Optional[str]] = None


class Format1(Enum):
    csv = 'csv'
    dict = 'dict'
    sql = 'sql'


class Expect(BaseParserModel):
    class Config:
        extra = Extra.forbid

    rows: Optional[Optional[Union[str, List[Dict[str, Any]]]]] = None
    format: Optional[Format1] = 'dict'
    fixture: Optional[Optional[str]] = None


class ResourceType8(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class Override(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[Dict[str, Any]] = None
    vars: Optional[Dict[str, Any]] = None
    env_vars: Optional[Dict[str, Any]] = None


class DependsOn23(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Config25(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    tags: Optional[Union[str, List[str]]] = None
    meta: Optional[Dict[str, Any]] = None


class Version(BaseParserModel):
    class Config:
        extra = Extra.forbid

    include: Optional[Optional[List[Union[str, float]]]] = None
    exclude: Optional[Optional[List[Union[str, float]]]] = None


class DisabledItem13(BaseParserModel):
    class Config:
        extra = Extra.forbid

    model: str
    given: List[GivenItem]
    expect: Expect = Field(..., title='UnitTestOutputFixture')
    name: str
    resource_type: ResourceType8
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: Optional[str] = ''
    overrides: Optional[Optional[Override]] = None
    depends_on: Optional[DependsOn23] = Field(None, title='DependsOn')
    config: Optional[Config25] = Field(None, title='UnitTestConfig')
    checksum: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    created_at: Optional[float] = None
    versions: Optional[Optional[Version]] = None
    version: Optional[Optional[Union[str, float]]] = None


class ResourceType9(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class WhereFilter17(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_sql_template: str


class WhereItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    where_filters: List[WhereFilter17]


class QueryParams1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    metrics: List[str]
    group_by: List[str]
    where: Optional[WhereItem1]


class ExportAs1(Enum):
    table = 'table'
    view = 'view'


class Config26(BaseParserModel):
    class Config:
        extra = Extra.forbid

    export_as: ExportAs1
    schema_name: Optional[Optional[str]] = None
    alias: Optional[Optional[str]] = None
    database: Optional[Optional[str]] = None


class Export1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    config: Config26 = Field(..., title='ExportConfig')


class FileSlice5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Metadatum5(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice5 = Field(..., title='FileSlice')


class ExportA1(Enum):
    table = 'table'
    view = 'view'


class Cache1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    enabled: Optional[bool] = False


class Config27(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None
    meta: Optional[Dict[str, Any]] = None
    export_as: Optional[Optional[ExportA1]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    cache: Optional[Cache1] = Field(None, title='SavedQueryCache')


class DependsOn24(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Ref20(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class SavedQueries(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: ResourceType9
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    query_params: QueryParams1 = Field(..., title='QueryParams')
    exports: List[Export1]
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    metadata: Optional[Optional[Metadatum5]] = None
    config: Optional[Config27] = Field(None, title='SavedQueryConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    group: Optional[Optional[str]] = None
    depends_on: Optional[DependsOn24] = Field(None, title='DependsOn')
    created_at: Optional[float] = None
    refs: Optional[List[Ref20]] = None


class ResourceType10(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class NodeRelationItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    alias: str
    schema_name: str
    database: Optional[Optional[str]] = None
    relation_name: Optional[Optional[str]] = ''


class Default1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    agg_time_dimension: Optional[Optional[str]] = None


class Type26(Enum):
    foreign = 'foreign'
    natural = 'natural'
    primary = 'primary'
    unique = 'unique'


class Entity1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    type: Type26
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    role: Optional[Optional[str]] = None
    expr: Optional[Optional[str]] = None


class Agg1(Enum):
    sum = 'sum'
    min = 'min'
    max = 'max'
    count_distinct = 'count_distinct'
    sum_boolean = 'sum_boolean'
    average = 'average'
    percentile = 'percentile'
    median = 'median'
    count = 'count'


class AggParam1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    percentile: Optional[Optional[float]] = None
    use_discrete_percentile: Optional[bool] = False
    use_approximate_percentile: Optional[bool] = False


class WindowChoice1(Enum):
    sum = 'sum'
    min = 'min'
    max = 'max'
    count_distinct = 'count_distinct'
    sum_boolean = 'sum_boolean'
    average = 'average'
    percentile = 'percentile'
    median = 'median'
    count = 'count'


class NonAdditiveDimensionItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    window_choice: WindowChoice1
    window_groupings: List[str]


class Measure1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    agg: Agg1
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    create_metric: Optional[bool] = False
    expr: Optional[Optional[str]] = None
    agg_params: Optional[Optional[AggParam1]] = None
    non_additive_dimension: Optional[Optional[NonAdditiveDimensionItem1]] = None
    agg_time_dimension: Optional[Optional[str]] = None


class Type27(Enum):
    categorical = 'categorical'
    time = 'time'


class TimeGranularity1(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class ValidityParam1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    is_start: Optional[bool] = False
    is_end: Optional[bool] = False


class TypeParam1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    time_granularity: TimeGranularity1
    validity_params: Optional[Optional[ValidityParam1]] = None


class FileSlice6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Metadatum6(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice6 = Field(..., title='FileSlice')


class Dimension1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    type: Type27
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    is_partition: Optional[bool] = False
    type_params: Optional[Optional[TypeParam1]] = None
    expr: Optional[Optional[str]] = None
    metadata: Optional[Optional[Metadatum6]] = None


class FileSlice7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class Metadatum7(BaseParserModel):
    class Config:
        extra = Extra.forbid

    repo_file_path: str
    file_slice: FileSlice7 = Field(..., title='FileSlice')


class DependsOn25(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Ref21(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    package: Optional[Optional[str]] = None
    version: Optional[Optional[Union[str, float]]] = None


class Config28(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True
    group: Optional[Optional[str]] = None
    meta: Optional[Dict[str, Any]] = None


class SemanticModels(BaseParserModel):
    class Config:
        extra = Extra.forbid

    name: str
    resource_type: ResourceType10
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    model: str
    node_relation: Optional[NodeRelationItem1]
    description: Optional[Optional[str]] = None
    label: Optional[Optional[str]] = None
    defaults: Optional[Optional[Default1]] = None
    entities: Optional[List[Entity1]] = None
    measures: Optional[List[Measure1]] = None
    dimensions: Optional[List[Dimension1]] = None
    metadata: Optional[Optional[Metadatum7]] = None
    depends_on: Optional[DependsOn25] = Field(None, title='DependsOn')
    refs: Optional[List[Ref21]] = None
    created_at: Optional[float] = None
    config: Optional[Config28] = Field(None, title='SemanticModelConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    primary_entity: Optional[Optional[str]] = None
    group: Optional[Optional[str]] = None


class Format2(Enum):
    csv = 'csv'
    dict = 'dict'
    sql = 'sql'


class GivenItem1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    input: str
    rows: Optional[Optional[Union[str, List[Dict[str, Any]]]]] = None
    format: Optional[Format2] = 'dict'
    fixture: Optional[Optional[str]] = None


class Format3(Enum):
    csv = 'csv'
    dict = 'dict'
    sql = 'sql'


class Expect1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    rows: Optional[Optional[Union[str, List[Dict[str, Any]]]]] = None
    format: Optional[Format3] = 'dict'
    fixture: Optional[Optional[str]] = None


class ResourceType11(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class Override1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[Dict[str, Any]] = None
    vars: Optional[Dict[str, Any]] = None
    env_vars: Optional[Dict[str, Any]] = None


class DependsOn26(BaseParserModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class Config29(BaseParserModel):
    class Config:
        extra = Extra.allow

    _extra: Optional[Dict[str, Any]] = None
    tags: Optional[Union[str, List[str]]] = None
    meta: Optional[Dict[str, Any]] = None


class Version1(BaseParserModel):
    class Config:
        extra = Extra.forbid

    include: Optional[Optional[List[Union[str, float]]]] = None
    exclude: Optional[Optional[List[Union[str, float]]]] = None


class UnitTests(BaseParserModel):
    class Config:
        extra = Extra.forbid

    model: str
    given: List[GivenItem1]
    expect: Expect1 = Field(..., title='UnitTestOutputFixture')
    name: str
    resource_type: ResourceType11
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: Optional[str] = ''
    overrides: Optional[Optional[Override1]] = None
    depends_on: Optional[DependsOn26] = Field(None, title='DependsOn')
    config: Optional[Config29] = Field(None, title='UnitTestConfig')
    checksum: Optional[Optional[str]] = None
    schema_: Optional[Optional[str]] = Field(None, alias='schema')
    created_at: Optional[float] = None
    versions: Optional[Optional[Version1]] = None
    version: Optional[Optional[Union[str, float]]] = None


class ManifestV12(BaseParserModel):
    class Config:
        extra = Extra.forbid

    metadata: Metadata = Field(
        ..., description='Metadata about the manifest', title='ManifestMetadata'
    )
    nodes: Dict[
        str, Union[Node, Node1, Node2, Node3, Node4, Node5, Node6, Node7]
    ] = Field(
        ..., description='The nodes defined in the dbt project and its dependencies'
    )
    sources: Dict[str, Sources] = Field(
        ..., description='The sources defined in the dbt project and its dependencies'
    )
    macros: Dict[str, Macros] = Field(
        ..., description='The macros defined in the dbt project and its dependencies'
    )
    docs: Dict[str, Docs18] = Field(
        ..., description='The docs defined in the dbt project and its dependencies'
    )
    exposures: Dict[str, Exposures] = Field(
        ..., description='The exposures defined in the dbt project and its dependencies'
    )
    metrics: Dict[str, Metrics] = Field(
        ..., description='The metrics defined in the dbt project and its dependencies'
    )
    groups: Dict[str, Groups] = Field(
        ..., description='The groups defined in the dbt project'
    )
    selectors: Dict[str, Any] = Field(
        ..., description='The selectors defined in selectors.yml'
    )
    disabled: Optional[
        Dict[
            str,
            List[
                Union[
                    DisabledItem,
                    DisabledItem1,
                    DisabledItem2,
                    DisabledItem3,
                    DisabledItem4,
                    DisabledItem5,
                    DisabledItem6,
                    DisabledItem7,
                    DisabledItem8,
                    DisabledItem9,
                    DisabledItem10,
                    DisabledItem11,
                    DisabledItem12,
                    DisabledItem13,
                ]
            ],
        ]
    ] = Field(..., description='A mapping of the disabled nodes in the target')
    parent_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from\xa0child nodes to their dependencies'
    )
    child_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from parent nodes to their dependents'
    )
    group_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from group names to their nodes'
    )
    saved_queries: Dict[str, SavedQueries] = Field(
        ..., description='The saved queries defined in the dbt project'
    )
    semantic_models: Dict[str, SemanticModels] = Field(
        ..., description='The semantic models defined in the dbt project'
    )
    unit_tests: Dict[str, UnitTests] = Field(
        ..., description='The unit tests defined in the project'
    )
