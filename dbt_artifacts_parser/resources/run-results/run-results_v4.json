{
  "type": "object",
  "required": [
    "metadata",
    "results",
    "elapsed_time"
  ],
  "properties": {
    "metadata": {
      "$ref": "#/definitions/BaseArtifactMetadata"
    },
    "results": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RunResultOutput"
      }
    },
    "elapsed_time": {
      "type": "number"
    },
    "args": {
      "type": "object",
      "default": {}
    }
  },
  "additionalProperties": false,
  "description": "RunResultsArtifact(metadata: dbt.contracts.util.BaseArtifactMetadata, results: Sequence[dbt.contracts.results.RunResultOutput], elapsed_time: float, args: Dict[str, Any] = <factory>)",
  "definitions": {
    "BaseArtifactMetadata": {
      "type": "object",
      "required": [
        "dbt_schema_version"
      ],
      "properties": {
        "dbt_schema_version": {
          "type": "string"
        },
        "dbt_version": {
          "type": "string",
          "default": "1.0.0b2"
        },
        "generated_at": {
          "type": "string",
          "format": "date-time",
          "default": "2021-11-02T20:18:06.799863Z"
        },
        "invocation_id": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {}
        }
      },
      "additionalProperties": false,
      "description": "BaseArtifactMetadata(dbt_schema_version: str, dbt_version: str = '1.0.0b2', generated_at: datetime.datetime = <factory>, invocation_id: Union[str, NoneType] = <factory>, env: Dict[str, str] = <factory>)"
    },
    "RunResultOutput": {
      "type": "object",
      "required": [
        "status",
        "timing",
        "thread_id",
        "execution_time",
        "adapter_response",
        "unique_id"
      ],
      "properties": {
        "status": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "success",
                "error",
                "skipped"
              ]
            },
            {
              "type": "string",
              "enum": [
                "pass",
                "error",
                "fail",
                "warn",
                "skipped"
              ]
            },
            {
              "type": "string",
              "enum": [
                "pass",
                "warn",
                "error",
                "runtime error"
              ]
            }
          ]
        },
        "timing": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimingInfo"
          }
        },
        "thread_id": {
          "type": "string"
        },
        "execution_time": {
          "type": "number"
        },
        "adapter_response": {
          "type": "object"
        },
        "message": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "failures": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "unique_id": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "description": "RunResultOutput(status: Union[dbt.contracts.results.RunStatus, dbt.contracts.results.TestStatus, dbt.contracts.results.FreshnessStatus], timing: List[dbt.contracts.results.TimingInfo], thread_id: str, execution_time: float, adapter_response: Dict[str, Any], message: Union[str, NoneType], failures: Union[int, NoneType], unique_id: str)"
    },
    "TimingInfo": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "started_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "completed_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "description": "TimingInfo(name: str, started_at: Union[datetime.datetime, NoneType] = None, completed_at: Union[datetime.datetime, NoneType] = None)"
    },
    "FreshnessMetadata": {
      "type": "object",
      "required": [],
      "properties": {
        "dbt_schema_version": {
          "type": "string",
          "default": "https://schemas.getdbt.com/dbt/sources/v3.json"
        },
        "dbt_version": {
          "type": "string",
          "default": "1.0.0b2"
        },
        "generated_at": {
          "type": "string",
          "format": "date-time",
          "default": "2021-11-02T20:18:06.796684Z"
        },
        "invocation_id": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {}
        }
      },
      "additionalProperties": false,
      "description": "FreshnessMetadata(dbt_schema_version: str = <factory>, dbt_version: str = '1.0.0b2', generated_at: datetime.datetime = <factory>, invocation_id: Union[str, NoneType] = <factory>, env: Dict[str, str] = <factory>)"
    },
    "SourceFreshnessRuntimeError": {
      "type": "object",
      "required": [
        "unique_id",
        "status"
      ],
      "properties": {
        "unique_id": {
          "type": "string"
        },
        "error": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "runtime error"
          ]
        }
      },
      "additionalProperties": false,
      "description": "SourceFreshnessRuntimeError(unique_id: str, error: Union[str, int, NoneType], status: dbt.contracts.results.FreshnessErrorEnum)"
    },
    "SourceFreshnessOutput": {
      "type": "object",
      "required": [
        "unique_id",
        "max_loaded_at",
        "snapshotted_at",
        "max_loaded_at_time_ago_in_s",
        "status",
        "criteria",
        "adapter_response",
        "timing",
        "thread_id",
        "execution_time"
      ],
      "properties": {
        "unique_id": {
          "type": "string"
        },
        "max_loaded_at": {
          "type": "string",
          "format": "date-time"
        },
        "snapshotted_at": {
          "type": "string",
          "format": "date-time"
        },
        "max_loaded_at_time_ago_in_s": {
          "type": "number"
        },
        "status": {
          "type": "string",
          "enum": [
            "pass",
            "warn",
            "error",
            "runtime error"
          ]
        },
        "criteria": {
          "$ref": "#/definitions/FreshnessThreshold"
        },
        "adapter_response": {
          "type": "object"
        },
        "timing": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimingInfo"
          }
        },
        "thread_id": {
          "type": "string"
        },
        "execution_time": {
          "type": "number"
        }
      },
      "additionalProperties": false,
      "description": "SourceFreshnessOutput(unique_id: str, max_loaded_at: datetime.datetime, snapshotted_at: datetime.datetime, max_loaded_at_time_ago_in_s: float, status: dbt.contracts.results.FreshnessStatus, criteria: dbt.contracts.graph.unparsed.FreshnessThreshold, adapter_response: Dict[str, Any], timing: List[dbt.contracts.results.TimingInfo], thread_id: str, execution_time: float)"
    },
    "FreshnessThreshold": {
      "type": "object",
      "required": [],
      "properties": {
        "warn_after": {
          "oneOf": [
            {
              "$ref": "#/definitions/Time"
            },
            {
              "type": "null"
            }
          ],
          "default": {
            "count": null,
            "period": null
          }
        },
        "error_after": {
          "oneOf": [
            {
              "$ref": "#/definitions/Time"
            },
            {
              "type": "null"
            }
          ],
          "default": {
            "count": null,
            "period": null
          }
        },
        "filter": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "description": "FreshnessThreshold(warn_after: Union[dbt.contracts.graph.unparsed.Time, NoneType] = <factory>, error_after: Union[dbt.contracts.graph.unparsed.Time, NoneType] = <factory>, filter: Union[str, NoneType] = None)"
    },
    "Time": {
      "type": "object",
      "required": [],
      "properties": {
        "count": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "period": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "minute",
                "hour",
                "day"
              ]
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "description": "Time(count: Union[int, NoneType] = None, period: Union[dbt.contracts.graph.unparsed.TimePeriod, NoneType] = None)"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://schemas.getdbt.com/dbt/run-results/v4.json"
}