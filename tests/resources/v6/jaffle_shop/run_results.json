{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.0rc1", "generated_at": "2024-11-29T05:11:11.244842Z", "invocation_id": "a196b0cb-aa51-4426-800c-0a54e6e90d27", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.219519Z", "completed_at": "2024-11-29T05:11:09.232462Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.232711Z", "completed_at": "2024-11-29T05:11:09.232720Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03240704536437988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_columns", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as parent_unique_id\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as data_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as table_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as resource_type\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_columns`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.167610Z", "completed_at": "2024-11-29T05:11:09.233711Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.312160Z", "completed_at": "2024-11-29T05:11:09.312177Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14572405815124512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.data_monitoring_metrics", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n    \n    select * from (\n            select\n            \n                \n        cast('dummy_string' as string) as id\n\n,\n                \n        cast('dummy_string' as string) as full_table_name\n\n,\n                \n        cast('dummy_string' as string) as column_name\n\n,\n                \n        cast('dummy_string' as string) as metric_name\n\n,\n                \n        cast(123456789.99 as FLOAT64) as metric_value\n\n,\n                \n        cast('dummy_string' as string) as source_value\n\n,\n                cast('2091-02-17' as timestamp) as bucket_start\n\n,\n                cast('2091-02-17' as timestamp) as bucket_end\n\n,\n                \n        cast(123456789 as INT64) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as timestamp) as updated_at\n\n,\n                \n        cast('dummy_string' as string) as dimension\n\n,\n                \n        cast('dummy_string' as string) as dimension_value\n\n,\n                \n        cast('dummy_string' as string) as metric_properties\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "`your-project`.`elementary`.`data_monitoring_metrics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.211372Z", "completed_at": "2024-11-29T05:11:09.319103Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.356003Z", "completed_at": "2024-11-29T05:11:09.356016Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14535093307495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_models", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as alias\n\n,\n                \n        cast('dummy_string' as string) as checksum\n\n,\n                \n        cast('dummy_string' as string) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as owner\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as patch_path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n,\n                \n        cast('dummy_string' as string) as bigquery_partition_by\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_models`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.235202Z", "completed_at": "2024-11-29T05:11:09.340905Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.356911Z", "completed_at": "2024-11-29T05:11:09.356917Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14821195602416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_invocations", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as string) as invocation_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as job_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as job_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as job_run_id\n\n,\n                \n        cast('dummy_string' as string) as run_started_at\n\n,\n                \n        cast('dummy_string' as string) as run_completed_at\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as string) as command\n\n,\n                \n        cast('dummy_string' as string) as dbt_version\n\n,\n                \n        cast('dummy_string' as string) as elementary_version\n\n,\n                \n        cast (True as BOOL) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as invocation_vars\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as vars\n\n,\n                \n        cast('dummy_string' as string) as target_name\n\n,\n                \n        cast('dummy_string' as string) as target_database\n\n,\n                \n        cast('dummy_string' as string) as target_schema\n\n,\n                \n        cast('dummy_string' as string) as target_profile_name\n\n,\n                \n        cast(123456789 as INT64) as threads\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as selected\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as yaml_selector\n\n,\n                \n        cast('dummy_string' as string) as project_id\n\n,\n                \n        cast('dummy_string' as string) as project_name\n\n,\n                \n        cast('dummy_string' as string) as env\n\n,\n                \n        cast('dummy_string' as string) as env_id\n\n,\n                \n        cast('dummy_string' as string) as cause_category\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as cause\n\n,\n                \n        cast('dummy_string' as string) as pull_request_id\n\n,\n                \n        cast('dummy_string' as string) as git_sha\n\n,\n                \n        cast('dummy_string' as string) as orchestrator\n\n,\n                \n        cast('dummy_string' as string) as dbt_user\n\n,\n                \n        cast('dummy_string' as string) as job_url\n\n,\n                \n        cast('dummy_string' as string) as job_run_url\n\n,\n                \n        cast('dummy_string' as string) as account_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as target_adapter_specific_fields\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_invocations`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.247454Z", "completed_at": "2024-11-29T05:11:09.355429Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.368679Z", "completed_at": "2024-11-29T05:11:09.368688Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1585710048675537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_metrics", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as label\n\n,\n                \n        cast('dummy_string' as string) as model\n\n,\n                \n        cast('dummy_string' as string) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as sql\n\n,\n                \n        cast('dummy_string' as string) as timestamp\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as filters\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as time_grains\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as dimensions\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_metrics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.312835Z", "completed_at": "2024-11-29T05:11:09.357656Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.370659Z", "completed_at": "2024-11-29T05:11:09.370666Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.16317009925842285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_exposures", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as maturity\n\n,\n                \n        cast('dummy_string' as string) as type\n\n,\n                \n        cast('dummy_string' as string) as owner_email\n\n,\n                \n        cast('dummy_string' as string) as owner_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as url\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_columns\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n,\n                \n        cast('dummy_string' as string) as label\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as raw_queries\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_exposures`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.326574Z", "completed_at": "2024-11-29T05:11:09.358060Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.371186Z", "completed_at": "2024-11-29T05:11:09.371193Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.1403508186340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_source_freshness_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as string) as source_freshness_execution_id\n\n,\n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as max_loaded_at\n\n,\n                \n        cast('dummy_string' as string) as snapshotted_at\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast(123456789.99 as FLOAT64) as max_loaded_at_time_ago_in_s\n\n,\n                \n        cast('dummy_string' as string) as status\n\n,\n                \n        cast('dummy_string' as string) as error\n\n,\n                \n        cast('dummy_string' as string) as compile_started_at\n\n,\n                \n        cast('dummy_string' as string) as compile_completed_at\n\n,\n                \n        cast('dummy_string' as string) as execute_started_at\n\n,\n                \n        cast('dummy_string' as string) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as string) as invocation_id\n\n,\n                \n        cast('dummy_string' as string) as warn_after\n\n,\n                \n        cast('dummy_string' as string) as error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as filter\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "`your-project`.`elementary`.`dbt_source_freshness_results`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.346169Z", "completed_at": "2024-11-29T05:11:09.369257Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.374433Z", "completed_at": "2024-11-29T05:11:09.374453Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.14534306526184082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_seeds", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as alias\n\n,\n                \n        cast('dummy_string' as string) as checksum\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as owner\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_seeds`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.321339Z", "completed_at": "2024-11-29T05:11:09.358426Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.371787Z", "completed_at": "2024-11-29T05:11:09.371793Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.1418137550354004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_snapshots", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as alias\n\n,\n                \n        cast('dummy_string' as string) as checksum\n\n,\n                \n        cast('dummy_string' as string) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as owner\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as patch_path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n,\n                \n        cast('dummy_string' as string) as bigquery_partition_by\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_snapshots`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.334264Z", "completed_at": "2024-11-29T05:11:09.367607Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.372661Z", "completed_at": "2024-11-29T05:11:09.372667Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.14091706275939941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_run_results", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as string) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as invocation_id\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as message\n\n,\n                \n        cast('dummy_string' as string) as status\n\n,\n                \n        cast('dummy_string' as string) as resource_type\n\n,\n                \n        cast(123456789.99 as FLOAT64) as execution_time\n\n,\n                \n        cast('dummy_string' as string) as execute_started_at\n\n,\n                \n        cast('dummy_string' as string) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as string) as compile_started_at\n\n,\n                \n        cast('dummy_string' as string) as compile_completed_at\n\n,\n                \n        cast(31474836478 as bigint) as rows_affected\n\n,\n                \n        cast (True as BOOL) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as compiled_code\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as string) as query_id\n\n,\n                \n        cast('dummy_string' as string) as thread_id\n\n,\n                \n        cast('dummy_string' as string) as materialization\n\n,\n                \n        cast('dummy_string' as string) as adapter_response\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_run_results`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.358854Z", "completed_at": "2024-11-29T05:11:09.374059Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.385922Z", "completed_at": "2024-11-29T05:11:09.385928Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08376598358154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_sources", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as source_name\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as identifier\n\n,\n                \n        cast('dummy_string' as string) as loaded_at_field\n\n,\n                \n        cast('dummy_string' as string) as freshness_warn_after\n\n,\n                \n        cast('dummy_string' as string) as freshness_error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as freshness_filter\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as freshness_description\n\n,\n                \n        cast('dummy_string' as string) as relation_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as owner\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as source_description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_sources`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.376809Z", "completed_at": "2024-11-29T05:11:09.405810Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.422843Z", "completed_at": "2024-11-29T05:11:09.422849Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.046630859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.elementary.elementary-on-run-start-0", "compiled": true, "compiled_code": "\n  \n  \n\n  \n  \n\n  \n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.388484Z", "completed_at": "2024-11-29T05:11:09.422147Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.432437Z", "completed_at": "2024-11-29T05:11:09.432443Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06433892250061035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_tests", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as short_name\n\n,\n                \n        cast('dummy_string' as string) as alias\n\n,\n                \n        cast('dummy_string' as string) as test_column_name\n\n,\n                \n        cast('dummy_string' as string) as severity\n\n,\n                \n        cast('dummy_string' as string) as warn_if\n\n,\n                \n        cast('dummy_string' as string) as error_if\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_params\n\n,\n                \n        cast('dummy_string' as string) as test_namespace\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as model_tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as model_owners\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('dummy_string' as string) as parent_model_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('dummy_string' as string) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n,\n                \n        cast('dummy_string' as string) as quality_dimension\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`dbt_tests`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.409494Z", "completed_at": "2024-11-29T05:11:09.430635Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.436708Z", "completed_at": "2024-11-29T05:11:09.436715Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06141805648803711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.metadata", "compiled": true, "compiled_code": "\n\nSELECT\n    '0.13.2' as dbt_pkg_version", "relation_name": "`your-project`.`elementary`.`metadata`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.399504Z", "completed_at": "2024-11-29T05:11:09.423527Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.436128Z", "completed_at": "2024-11-29T05:11:09.436135Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.061200857162475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.elementary_test_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as string) as id\n\n,\n                \n        cast('dummy_string' as string) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as model_unique_id\n\n,\n                \n        cast('dummy_string' as string) as invocation_id\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as table_name\n\n,\n                \n        cast('dummy_string' as string) as column_name\n\n,\n                \n        cast('dummy_string' as string) as test_type\n\n,\n                \n        cast('dummy_string' as string) as test_sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_results_description\n\n,\n                \n        cast('dummy_string' as string) as owners\n\n,\n                \n        cast('dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_results_query\n\n,\n                \n        cast('dummy_string' as string) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_params\n\n,\n                \n        cast('dummy_string' as string) as severity\n\n,\n                \n        cast('dummy_string' as string) as status\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as string) as test_short_name\n\n,\n                \n        cast('dummy_string' as string) as test_alias\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as result_rows\n\n,\n                \n        cast(31474836478 as bigint) as failed_row_count\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "`your-project`.`elementary`.`elementary_test_results`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.432933Z", "completed_at": "2024-11-29T05:11:09.435240Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.464298Z", "completed_at": "2024-11-29T05:11:09.464307Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.06545686721801758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jaffle_shop.raw_customers", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.437269Z", "completed_at": "2024-11-29T05:11:09.438939Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.465613Z", "completed_at": "2024-11-29T05:11:09.465625Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.051518917083740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jaffle_shop.raw_orders", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.424027Z", "completed_at": "2024-11-29T05:11:09.439193Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.466166Z", "completed_at": "2024-11-29T05:11:09.466172Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07879900932312012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.elementary.elementary-on-run-end-0", "compiled": true, "compiled_code": "\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.439551Z", "completed_at": "2024-11-29T05:11:09.441227Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.466662Z", "completed_at": "2024-11-29T05:11:09.466670Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.05211687088012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jaffle_shop.raw_payments", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.415178Z", "completed_at": "2024-11-29T05:11:09.435538Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.467529Z", "completed_at": "2024-11-29T05:11:09.467552Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.0820610523223877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.schema_columns_snapshot", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as string) as column_state_id\n\n,\n                \n        cast('dummy_string' as string) as full_column_name\n\n,\n                \n        cast('dummy_string' as string) as full_table_name\n\n,\n                \n        cast('dummy_string' as string) as column_name\n\n,\n                \n        cast('dummy_string' as string) as data_type\n\n,\n                \n        cast (True as BOOL) as is_new\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "`your-project`.`elementary`.`schema_columns_snapshot`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.441532Z", "completed_at": "2024-11-29T05:11:09.468842Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.476219Z", "completed_at": "2024-11-29T05:11:09.476225Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05463004112243652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.metrics_anomaly_score", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from `your-project`.`elementary`.`data_monitoring_metrics`\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and bucket_end >= \n       timestamp_add(cast(\n    timestamp_trunc(cast(current_timestamp as timestamp), day)\n as timestamp), INTERVAL cast(-7 as INT64) day)\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "relation_name": "`your-project`.`elementary`.`metrics_anomaly_score`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.454366Z", "completed_at": "2024-11-29T05:11:09.470050Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.477244Z", "completed_at": "2024-11-29T05:11:09.477250Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023536205291748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.job_run_results", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    \nmin(cast(run_started_at as timestamp))\n as job_run_started_at,\n    \nmax(cast(run_completed_at as timestamp))\n as job_run_completed_at,\n    \n    timestamp_diff(\nmax(cast(run_completed_at as timestamp))\n, \nmin(cast(run_started_at as timestamp))\n, second)\n as job_run_execution_time\n  from `your-project`.`elementary`.`dbt_invocations`\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "relation_name": "`your-project`.`elementary`.`job_run_results`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.473209Z", "completed_at": "2024-11-29T05:11:09.480776Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.494923Z", "completed_at": "2024-11-29T05:11:09.494929Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.026786088943481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.monitors_runs", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from `your-project`.`elementary`.`data_monitoring_metrics`\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end,\n           min(bucket_end) as first_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "relation_name": "`your-project`.`elementary`.`monitors_runs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.499893Z", "completed_at": "2024-11-29T05:11:09.533562Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.533896Z", "completed_at": "2024-11-29T05:11:09.533902Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.055373191833496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_anomaly_detection", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from `your-project`.`elementary`.`elementary_test_results`\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "relation_name": "`your-project`.`elementary`.`alerts_anomaly_detection`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.504604Z", "completed_at": "2024-11-29T05:11:09.538824Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.539111Z", "completed_at": "2024-11-29T05:11:09.539116Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.060179948806762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_tests", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from `your-project`.`elementary`.`elementary_test_results`\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'   and lower(status) != 'skipped'  and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "relation_name": "`your-project`.`elementary`.`alerts_dbt_tests`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.490558Z", "completed_at": "2024-11-29T05:11:09.523907Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.542727Z", "completed_at": "2024-11-29T05:11:09.542734Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0528256893157959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_schema_changes", "compiled": true, "compiled_code": "\n\n\nwith elementary_test_results as (\n    select * from `your-project`.`elementary`.`elementary_test_results`\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "relation_name": "`your-project`.`elementary`.`alerts_schema_changes`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.495822Z", "completed_at": "2024-11-29T05:11:09.538365Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.544117Z", "completed_at": "2024-11-29T05:11:09.544140Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0659189224243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_artifacts_hashes", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n  'dbt_models' as artifacts_model,\n   metadata_hash\nfrom `your-project`.`elementary`.`dbt_models`\n union all \n\nselect\n  'dbt_tests' as artifacts_model,\n   metadata_hash\nfrom `your-project`.`elementary`.`dbt_tests`\n union all \n\nselect\n  'dbt_sources' as artifacts_model,\n   metadata_hash\nfrom `your-project`.`elementary`.`dbt_sources`\n union all \n\nselect\n  'dbt_snapshots' as artifacts_model,\n   metadata_hash\nfrom `your-project`.`elementary`.`dbt_snapshots`\n union all \n\nselect\n  'dbt_metrics' as artifacts_model,\n   metadata_hash\nfrom `your-project`.`elementary`.`dbt_metrics`\n union all \n\nselect\n  'dbt_exposures' as artifacts_model,\n   metadata_hash\nfrom `your-project`.`elementary`.`dbt_exposures`\n union all \n\nselect\n  'dbt_seeds' as artifacts_model,\n   metadata_hash\nfrom `your-project`.`elementary`.`dbt_seeds`\n union all \n\nselect\n  'dbt_columns' as artifacts_model,\n   metadata_hash\nfrom `your-project`.`elementary`.`dbt_columns`\n\n\norder by metadata_hash", "relation_name": "`your-project`.`elementary`.`dbt_artifacts_hashes`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.535028Z", "completed_at": "2024-11-29T05:11:09.546028Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.552431Z", "completed_at": "2024-11-29T05:11:09.552434Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.017913818359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jaffle_shop.stg_orders", "compiled": true, "compiled_code": "with source as (\n    select * from `your-project`.`jaffle_shop`.`raw_orders`\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`your-project`.`jaffle_shop`.`stg_orders`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.481813Z", "completed_at": "2024-11-29T05:11:09.508054Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.546273Z", "completed_at": "2024-11-29T05:11:09.546295Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07590579986572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.model_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from `your-project`.`elementary`.`dbt_run_results`\n),\n\ndbt_models as (\n    select * from `your-project`.`elementary`.`dbt_models`\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    coalesce(run_results.materialization, models.materialization) as materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY \n    timestamp_trunc(cast(run_results.generated_at as timestamp), day)\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY \n    timestamp_trunc(cast(run_results.generated_at as timestamp), day)\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "relation_name": "`your-project`.`elementary`.`model_run_results`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.508628Z", "completed_at": "2024-11-29T05:11:09.544719Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.551142Z", "completed_at": "2024-11-29T05:11:09.551150Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.07169413566589355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.snapshot_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from `your-project`.`elementary`.`dbt_run_results`\n),\n\ndbt_snapshots as (\n    select * from `your-project`.`elementary`.`dbt_snapshots`\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    coalesce(run_results.materialization, snapshots.materialization) as materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "relation_name": "`your-project`.`elementary`.`snapshot_run_results`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.540197Z", "completed_at": "2024-11-29T05:11:09.545666Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.551886Z", "completed_at": "2024-11-29T05:11:09.551894Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.012225866317749023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jaffle_shop.stg_payments", "compiled": true, "compiled_code": "with source as (\n    select * from `your-project`.`jaffle_shop`.`raw_payments`\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`your-project`.`jaffle_shop`.`stg_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.512125Z", "completed_at": "2024-11-29T05:11:09.547635Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.559876Z", "completed_at": "2024-11-29T05:11:09.559885Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.08323001861572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_source_freshness", "compiled": true, "compiled_code": "\n\nwith results as (\n  select * from `your-project`.`elementary`.`dbt_source_freshness_results`\n),\n\nsources as (\n  select * from `your-project`.`elementary`.`dbt_sources`\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  cast(results.generated_at as timestamp) as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  results.warn_after,\n  results.error_after,\n  results.filter,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path,\n  -- These columns below are deprecated. We add them since this view\n  -- was used to be loaded into an incremental model with those columns, their names were later changed\n  -- and Databricks doesn't respect `on_schema_change = 'append_new_columns'` properly, as described here -\n  -- https://docs.databricks.com/en/delta/update-schema.html#automatic-schema-evolution-for-delta-lake-merge\n  results.error_after as freshness_error_after,\n  results.warn_after as freshness_warn_after,\n  results.filter as freshness_filter\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere True and lower(status) != 'pass'", "relation_name": "`your-project`.`elementary`.`alerts_dbt_source_freshness`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.548617Z", "completed_at": "2024-11-29T05:11:09.562600Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.571603Z", "completed_at": "2024-11-29T05:11:09.571613Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.060211896896362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jaffle_shop.stg_customers", "compiled": true, "compiled_code": "with source as (\n    select * from `your-project`.`jaffle_shop`.`raw_customers`\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`your-project`.`jaffle_shop`.`stg_customers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.552897Z", "completed_at": "2024-11-29T05:11:09.563082Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.572349Z", "completed_at": "2024-11-29T05:11:09.572353Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.055252790451049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.test_result_rows", "compiled": true, "compiled_code": "\n\n-- depends_on: `your-project`.`elementary`.`elementary_test_results`\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as string) as elementary_test_results_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as result_row\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "`your-project`.`elementary`.`test_result_rows`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.565822Z", "completed_at": "2024-11-29T05:11:09.586486Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.609169Z", "completed_at": "2024-11-29T05:11:09.609177Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0576629638671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.anomaly_threshold_sensitivity", "compiled": true, "compiled_code": "\n\nwith metrics_anomaly_score as (\n\n    select * from `your-project`.`elementary`.`metrics_anomaly_score`\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as `is_anomaly_1_5`,\n        case when abs(anomaly_score) >= 2 then true else false end as `is_anomaly_2`,\n        case when abs(anomaly_score) >= 2.5 then true else false end as `is_anomaly_2_5`,\n        case when abs(anomaly_score) >= 3 then true else false end as `is_anomaly_3`,\n        case when abs(anomaly_score) >= 3.5 then true else false end as `is_anomaly_3_5`,\n        case when abs(anomaly_score) >= 4 then true else false end as `is_anomaly_4`,\n        case when abs(anomaly_score) >= 4.5 then true else false end as `is_anomaly_4_5`\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "relation_name": "`your-project`.`elementary`.`anomaly_threshold_sensitivity`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.576793Z", "completed_at": "2024-11-29T05:11:09.608669Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.619749Z", "completed_at": "2024-11-29T05:11:09.619756Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05638575553894043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from `your-project`.`jaffle_shop`.`stg_orders`\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.587645Z", "completed_at": "2024-11-29T05:11:09.617372Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.620839Z", "completed_at": "2024-11-29T05:11:09.620844Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.056243896484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `your-project`.`jaffle_shop`.`stg_orders`\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.593754Z", "completed_at": "2024-11-29T05:11:09.618264Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.625293Z", "completed_at": "2024-11-29T05:11:09.625302Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.060402870178222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_id as unique_field\n  from `your-project`.`jaffle_shop`.`stg_orders`\n  where order_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.597890Z", "completed_at": "2024-11-29T05:11:09.618759Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.629855Z", "completed_at": "2024-11-29T05:11:09.629863Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_models", "compiled": true, "compiled_code": "\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from `your-project`.`elementary`.`model_run_results`\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from `your-project`.`elementary`.`snapshot_run_results`\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       cast(generated_at as timestamp) as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere True and lower(status) != 'success'and lower(status) != 'skipped'", "relation_name": "`your-project`.`elementary`.`alerts_dbt_models`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.603036Z", "completed_at": "2024-11-29T05:11:09.619305Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.630602Z", "completed_at": "2024-11-29T05:11:09.630606Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.05656599998474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jaffle_shop.orders", "compiled": true, "compiled_code": "\n\n\n\nwith orders as (\n\n    select * from `your-project`.`jaffle_shop`.`stg_orders`\n\n),\n\npayments as (\n\n    select * from `your-project`.`jaffle_shop`.`stg_payments`\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final", "relation_name": "`your-project`.`jaffle_shop`.`orders`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.609766Z", "completed_at": "2024-11-29T05:11:09.621301Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.632598Z", "completed_at": "2024-11-29T05:11:09.632608Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.058363914489746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from `your-project`.`jaffle_shop`.`stg_payments`\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.621745Z", "completed_at": "2024-11-29T05:11:09.633773Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.637700Z", "completed_at": "2024-11-29T05:11:09.637705Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.035735130310058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom `your-project`.`jaffle_shop`.`stg_payments`\nwhere payment_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.625809Z", "completed_at": "2024-11-29T05:11:09.634222Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.643802Z", "completed_at": "2024-11-29T05:11:09.643810Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04133200645446777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select payment_id as unique_field\n  from `your-project`.`jaffle_shop`.`stg_payments`\n  where payment_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.638805Z", "completed_at": "2024-11-29T05:11:09.657008Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.666850Z", "completed_at": "2024-11-29T05:11:09.666860Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.035513877868652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jaffle_shop.customers", "compiled": true, "compiled_code": "\n\n\nwith customers as (\n\n    select * from `your-project`.`jaffle_shop`.`stg_customers`\n\n),\n\norders as (\n\n    select * from `your-project`.`jaffle_shop`.`stg_orders`\n\n),\n\npayments as (\n\n    select * from `your-project`.`jaffle_shop`.`stg_payments`\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final", "relation_name": "`your-project`.`jaffle_shop`.`customers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.645180Z", "completed_at": "2024-11-29T05:11:09.666346Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.672750Z", "completed_at": "2024-11-29T05:11:09.672760Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03801298141479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `your-project`.`jaffle_shop`.`stg_customers`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.649093Z", "completed_at": "2024-11-29T05:11:09.667623Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.673963Z", "completed_at": "2024-11-29T05:11:09.673968Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.03789782524108887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `your-project`.`jaffle_shop`.`stg_customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.657415Z", "completed_at": "2024-11-29T05:11:09.671998Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.679563Z", "completed_at": "2024-11-29T05:11:09.679567Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.04250979423522949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom `your-project`.`jaffle_shop`.`orders`\nwhere amount is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.653363Z", "completed_at": "2024-11-29T05:11:09.668742Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.678357Z", "completed_at": "2024-11-29T05:11:09.678371Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.0353548526763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from `your-project`.`jaffle_shop`.`orders`\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.662311Z", "completed_at": "2024-11-29T05:11:09.674416Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.686124Z", "completed_at": "2024-11-29T05:11:09.686134Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0440058708190918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jaffle_shop.daily_orders", "compiled": true, "compiled_code": "\n\nWITH monthly_orders AS (\n  SELECT\n    -- convert date to first day of month\n    order_date,\n    status,\n    (\n      SELECT SUM(amount)\n      FROM UNNEST([1, 2, 3, 4, 5]) AS amount\n      WHERE amount > 2\n    ) AS demo,\n    SUM(amount + 1) AS total_amount,\n  FROM `your-project`.`jaffle_shop`.`orders`\n  GROUP BY 1, 2\n)\n\nSELECT *, FROM monthly_orders", "relation_name": "`your-project`.`jaffle_shop`.`daily_orders`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.669055Z", "completed_at": "2024-11-29T05:11:09.679163Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.686641Z", "completed_at": "2024-11-29T05:11:09.686669Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.041953086853027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bank_transfer_amount\nfrom `your-project`.`jaffle_shop`.`orders`\nwhere bank_transfer_amount is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.681645Z", "completed_at": "2024-11-29T05:11:09.689927Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.698692Z", "completed_at": "2024-11-29T05:11:09.698705Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.01762223243713379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `your-project`.`jaffle_shop`.`orders`\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.675006Z", "completed_at": "2024-11-29T05:11:09.690854Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.699664Z", "completed_at": "2024-11-29T05:11:09.699671Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.038063764572143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_amount\nfrom `your-project`.`jaffle_shop`.`orders`\nwhere coupon_amount is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.695164Z", "completed_at": "2024-11-29T05:11:09.756249Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.756681Z", "completed_at": "2024-11-29T05:11:09.756716Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08216023445129395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_card_amount\nfrom `your-project`.`jaffle_shop`.`orders`\nwhere credit_card_amount is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.700749Z", "completed_at": "2024-11-29T05:11:09.766338Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.780874Z", "completed_at": "2024-11-29T05:11:09.780881Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09317994117736816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gift_card_amount\nfrom `your-project`.`jaffle_shop`.`orders`\nwhere gift_card_amount is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.692165Z", "completed_at": "2024-11-29T05:11:09.757943Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.768871Z", "completed_at": "2024-11-29T05:11:09.768891Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08853578567504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `your-project`.`jaffle_shop`.`orders`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.761133Z", "completed_at": "2024-11-29T05:11:09.781980Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.786717Z", "completed_at": "2024-11-29T05:11:09.786723Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.09520816802978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_id as unique_field\n  from `your-project`.`jaffle_shop`.`orders`\n  where order_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.769651Z", "completed_at": "2024-11-29T05:11:09.785618Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.787353Z", "completed_at": "2024-11-29T05:11:09.787360Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08805608749389648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from `your-project`.`jaffle_shop`.`orders`\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from `your-project`.`jaffle_shop`.`customers`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.776137Z", "completed_at": "2024-11-29T05:11:09.786460Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.787854Z", "completed_at": "2024-11-29T05:11:09.787861Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.08787393569946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `your-project`.`jaffle_shop`.`customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.782269Z", "completed_at": "2024-11-29T05:11:09.788670Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:09.789025Z", "completed_at": "2024-11-29T05:11:09.789029Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.09069180488586426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `your-project`.`jaffle_shop`.`customers`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:09.517551Z", "completed_at": "2024-11-29T05:11:11.234932Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:11.235214Z", "completed_at": "2024-11-29T05:11:11.235222Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 1.7572400569915771, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.information_schema_columns", "compiled": true, "compiled_code": "\n\n    \n  \n    \n  \n\n  with dbt_models_data as (\n      select\n          database_name,\n          schema_name,\n          alias as table_name\n      from `your-project`.`elementary`.`dbt_models`\n  ),\n\n  dbt_snapshots_data as (\n      select\n          database_name,\n          schema_name,\n          alias as table_name\n      from `your-project`.`elementary`.`dbt_snapshots`\n  ),\n\n  dbt_sources_data as (\n      select\n          database_name,\n          schema_name,\n          name as table_name\n      from `your-project`.`elementary`.`dbt_sources`\n  ),\n\n  dbt_seeds_data as (\n      select\n          database_name,\n          schema_name,\n          name as table_name\n      from `your-project`.`elementary`.`dbt_seeds`\n  ),\n\n  tables_information as (\n      select * from dbt_models_data\n      union all\n      select * from dbt_sources_data\n      union all\n      select * from dbt_snapshots_data\n      union all\n      select * from dbt_seeds_data\n  ),\n\n  columns_information as (\n      \n    \n    \n    \n        (\n    \n    \n    \n      \n    \n    \n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from `your-project`.`jaffle_shop`.INFORMATION_SCHEMA.COLUMNS\n    where upper(table_schema) = upper('jaffle_shop')\n    \n\n    \n)\n        \n    \n\n\n\n  ),\n\n  information_schema_columns as (\n      select col_info.*\n      from tables_information tbl_info\n      join columns_information col_info\n          on (lower(tbl_info.database_name) = lower(col_info.database_name) and\n              lower(tbl_info.schema_name) = lower(col_info.schema_name) and\n              lower(tbl_info.table_name) = lower(col_info.table_name)\n          )\n  )\n\n  select *\n  from information_schema_columns\n\n", "relation_name": "`your-project`.`elementary`.`information_schema_columns`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-29T05:11:11.238090Z", "completed_at": "2024-11-29T05:11:11.241156Z"}, {"name": "execute", "started_at": "2024-11-29T05:11:11.241629Z", "completed_at": "2024-11-29T05:11:11.241636Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.004149675369262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.enriched_columns", "compiled": true, "compiled_code": "\n\n\nwith information_schema_columns as (\n    select\n        lower(database_name) as database_name,\n        lower(schema_name) as schema_name,\n        lower(table_name) as table_name,\n        lower(column_name) as name,\n        data_type\n    from `your-project`.`elementary`.`information_schema_columns`\n),\n\ndbt_columns as (\n    select\n        lower(database_name) as database_name,\n        lower(schema_name) as schema_name,\n        lower(table_name) as table_name,\n        lower(name) as name,\n        description\n    from `your-project`.`elementary`.`dbt_columns`\n)\n\nselect\n    database_name,\n    schema_name,\n    table_name,\n    name,\n    data_type,\n    description\nfrom information_schema_columns\nleft join dbt_columns using (database_name, schema_name, table_name, name)", "relation_name": "`your-project`.`elementary`.`enriched_columns`", "batch_results": null}], "elapsed_time": 3.3957760334014893, "args": {"compile": true, "macro_debugging": false, "require_nested_cumulative_type_params": false, "favor_state": false, "state_modified_compare_more_unrendered_values": false, "partial_parse": true, "print": true, "require_resource_names_without_spaces": false, "select": [], "empty_catalog": false, "log_level": "info", "show_resource_report": false, "static_parser": true, "skip_nodes_if_on_run_start_fails": false, "log_file_max_bytes": 10485760, "indirect_selection": "eager", "cache_selected_only": false, "log_format_file": "debug", "version_check": true, "introspect": true, "log_level_file": "debug", "use_colors_file": true, "which": "generate", "state_modified_compare_vars": false, "static": false, "defer": false, "require_explicit_package_overrides_for_builtin_materializations": true, "require_yaml_configuration_for_mf_time_spines": false, "source_freshness_run_project_hooks": false, "warn_error_options": {"include": [], "exclude": []}, "profiles_dir": "/Users/yu/local/src/github/jaffle_shop", "log_path": "/Users/yu/local/src/github/jaffle_shop/logs", "project_dir": "/Users/yu/local/src/github/jaffle_shop", "send_anonymous_usage_stats": true, "populate_cache": true, "partial_parse_file_diff": true, "strict_mode": false, "write_json": true, "exclude": [], "log_format": "default", "quiet": false, "invocation_command": "dbt docs generate", "printer_width": 80, "require_batched_execution_for_custom_microbatch_strategy": false, "vars": {}, "use_colors": true}}
